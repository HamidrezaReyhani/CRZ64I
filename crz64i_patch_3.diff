*** Begin Patch
*** Add File: tools/op_calibrate.py
+#!/usr/bin/env python3
+"""
+Small harness to measure energy per op using bench/micro_add and bench/micro_load.
+Tries RAPL under /sys/class/powercap, falls back to perf.
+"""
+import os, time, subprocess, argparse
+
+def find_rapl():
+    for root, dirs, files in os.walk('/sys/class/powercap'):
+        for f in files:
+            if f == 'energy_uj':
+                return os.path.join(root, f)
+    return None
+
+def read_rapl(p):
+    try:
+        with open(p,'r') as fh:
+            return int(fh.read().strip())
+    except:
+        return None
+
+def run_and_measure(cmd):
+    rapl = find_rapl()
+    if rapl:
+        before = read_rapl(rapl)
+        t0 = time.time()
+        subprocess.run(cmd, check=True)
+        t1 = time.time()
+        after = read_rapl(rapl)
+        if before is None or after is None:
+            return None, t1-t0
+        return (after-before)/1e6, t1-t0
+    else:
+        perf_cmd = ['perf','stat','-e','energy-pkg','--'] + cmd
+        p = subprocess.run(perf_cmd, capture_output=True, text=True)
+        for line in p.stderr.splitlines():
+            if 'energy' in line and 'pkg' in line:
+                try:
+                    val = float(line.split()[0])
+                    return val, None
+                except:
+                    pass
+        return None, None
+
+if __name__=='__main__':
+    ap = argparse.ArgumentParser()
+    ap.add_argument('prog', choices=['micro_add','micro_load'])
+    ap.add_argument('--iters', type=int, default=10000000)
+    ap.add_argument('--size', type=int, default=5000000)
+    args = ap.parse_args()
+    if args.prog=='micro_add':
+        cmd = ['./bench/micro_add', str(args.iters)]
+        J, t = run_and_measure(cmd)
+        print("energy(J):", J, "time(s):", t, "ops:", args.iters)
+        if J: print("energy/op(J):", J/float(args.iters))
+    else:
+        cmd = ['./bench/micro_load', str(args.iters), str(args.size)]
+        J, t = run_and_measure(cmd)
+        print("energy(J):", J, "time(s):", t, "loads:", args.iters)
+        if J: print("energy/load(J):", J/float(args.iters))
*** End Patch

